Microsoft (R) Macro Assembler Version 14.23.28106.4	    02/16/20 23:08:25
..\..\project_1\project_4.asm				     Page 1 - 1


				; Author: Mateo Estrada
				; Last Modified: 2/19/2020
				; OSU email address: estradma@oregonstate.edu
				; Course number/section: CS271/S400
				; Project Number: 4                 Due Date: 2/19/2020
				; Description: This program is designed to calculate composite numbers. The user is asked to enter the number of composites to be displayed, 
				; then you have to enter an integer in the range [1-400].
				; The program verifies that the number is in the range, if the number is not in range, then the loop repeats and the user is asked to enter a number that is within range.
				; Then the program calculates and displays all of the composite numbers up to and including the nth cmposite.
				; There is a specific format for the display of numbers. 



				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

				; variables for displaying the messages to the user
 00000000 4D 61 74 65 6F	myName			BYTE		"Mateo Estrada " , 0
	   20 45 73 74 72
	   61 64 61 20 00
 0000000F 20 4D 61 64 65	who				BYTE		" Made by ", 0
	   20 62 79 20 00
 00000019 20 43 6F 6D 70	intro1			BYTE		" Composite Numbers ", 0
	   6F 73 69 74 65
	   20 4E 75 6D 62
	   65 72 73 20 00
 0000002D 20 45 6E 74 65	intro2			BYTE		" Enter the number of composite numbers you would like to see ", 0
	   72 20 74 68 65
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 63 6F 6D 70
	   6F 73 69 74 65
	   20 6E 75 6D 62
	   65 72 73 20 79
	   6F 75 20 77 6F
	   75 6C 64 20 6C
	   69 6B 65 20 74
	   6F 20 73 65 65
	   20 00
 0000006B 20 49 27 6C 6C	intro3			BYTE		" I'll accept orders in the range [1,..,400]. ", 0
	   20 61 63 63 65
	   70 74 20 6F 72
	   64 65 72 73 20
	   69 6E 20 74 68
	   65 20 72 61 6E
	   67 65 20 5B 31
	   2C 2E 2E 2C 34
	   30 30 5D 2E 20
	   00

 00000099 20 54 68 65 20	composites		BYTE		" The composites are: ", 0
	   63 6F 6D 70 6F
	   73 69 74 65 73
	   20 61 72 65 3A
	   20 00
 000000AF 20 20 20 00		space			BYTE		"   ", 0
 000000B3 20 49 74 73 20	isIn			BYTE		" Its in here ", 0
	   69 6E 20 68 65
	   72 65 20 00

 000000C1 45 6E 74 65 72	userData1		BYTE		"Enter the number of composites to display [1 .. 400]:", 0			; 55
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   63 6F 6D 70 6F
	   73 69 74 65 73
	   20 74 6F 20 64
	   69 73 70 6C 61
	   79 20 5B 31 20
	   2E 2E 20 34 30
	   30 5D 3A 00
 000000F7 20 4F 75 74 20	userData2       BYTE		" Out of range. Try again. (try more than 3 times with same value within range (there was a bug I couldn't find)", 0
	   6F 66 20 72 61
	   6E 67 65 2E 20
	   54 72 79 20 61
	   67 61 69 6E 2E
	   20 28 74 72 79
	   20 6D 6F 72 65
	   20 74 68 61 6E
	   20 33 20 74 69
	   6D 65 73 20 77
	   69 74 68 20 73
	   61 6D 65 20 76
	   61 6C 75 65 20
	   77 69 74 68 69
	   6E 20 72 61 6E
	   67 65 20 28 74
	   68 65 72 65 20
	   77 61 73 20 61
	   20 62 75 67 20
	   49 20 63 6F 75
	   6C 64 6E 27 74
	   20 66 69 6E 64
	   29 00
 00000167 20 54 68 65 20	userData3		BYTE		" The composite numbers start at 4. " ,0 
	   63 6F 6D 70 6F
	   73 69 74 65 20
	   6E 75 6D 62 65
	   72 73 20 73 74
	   61 72 74 20 61
	   74 20 34 2E 20
	   00

 0000018B 20 54 68 65 20	gdbye			BYTE		" The results are attempted to be verified by 'Jarvis' and, ", 0
	   72 65 73 75 6C
	   74 73 20 61 72
	   65 20 61 74 74
	   65 6D 70 74 65
	   64 20 74 6F 20
	   62 65 20 76 65
	   72 69 66 69 65
	   64 20 62 79 20
	   27 4A 61 72 76
	   69 73 27 20 61
	   6E 64 2C 20 00
 000001C7 20 42 75 74 20	gdbye0			BYTE		" But Ultron inter... ERROR...DELETE -------------------", 0
	   55 6C 74 72 6F
	   6E 20 69 6E 74
	   65 72 2E 2E 2E
	   20 45 52 52 4F
	   52 2E 2E 2E 44
	   45 4C 45 54 45
	   20 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   00
 000001FF 20 55 4C 54 52	Ultron			BYTE		" ULTRON: [Speaking] 'What is this?...' ", 0 
	   4F 4E 3A 20 5B
	   53 70 65 61 6B
	   69 6E 67 5D 20
	   27 57 68 61 74
	   20 69 73 20 74
	   68 69 73 3F 2E
	   2E 2E 27 20 00


				; the constants that are the min and max

 = 00000190			max EQU 400
 = 00000001			min	EQU 1
 = 0000000A			rowLength EQU 10

				; value that will be the cap 
 00000227 00000000		dos				DWORD		?

				; im going to use a global variable for user input
 0000022B 00000000		n				DWORD		?
 0000022F 00000000		currentComp		DWORD		?			; the first composite number
 00000233 00000000		count			DWORD		?			; where we are in the loop
 00000237 00000000		currentDiv		DWORD		?			; the first divisor that might yield a composite because the remainder == 0
 0000023B 00000000		nextComp		DWORD		?			; this value is the one that has the next composite value
 00000000			.code
 00000000			main PROC
 00000000  E8 00000016					call	intro
 00000005  E8 00000058					call	getUserData
 0000000A  E8 000000A3					call	showComposite	
 0000000F  E8 000001A6					call	farewell

				; if the input value from the user is valid the next section of code will begin here
							
							exit
 00000014  6A 00	   *	    push   +000000000h
 00000016  E8 00000000 E   *	    call   ExitProcess
 0000001B			main ENDP


				; this is the intro procedure that makes the proper introductions tot he user

 0000001B			intro PROC
				; displays instructions using the intro and myName variables
				; most of this code is just printing for the user to know what to do
				; registers used: edx
 0000001B  BA 00000019 R				mov		edx, OFFSET intro1
 00000020  E8 00000000 E				call	WriteString
 00000025  E8 00000000 E				call	crlf
 0000002A  BA 0000000F R				mov		edx, OFFSET who
 0000002F  E8 00000000 E				call	WriteString
							
 00000034  BA 00000000 R				mov		edx, OFFSET myName
 00000039  E8 00000000 E				call	WriteString
 0000003E  E8 00000000 E				call	crlf
 00000043  BA 0000002D R				mov		edx, OFFSET intro2
 00000048  E8 00000000 E				call	WriteString
 0000004D  E8 00000000 E				call	crlf
 00000052  BA 0000006B R				mov		edx, OFFSET intro3
 00000057  E8 00000000 E				call	WriteString
 0000005C  E8 00000000 E				call	crlf	



 00000061  C3						ret
 00000062			intro ENDP


 00000062			getUserData PROC
				; Pre: This procedure takes the data from the user and calls a 
				; subprocedure to validate if it's within the range.
				; saves input data in: n
				; post: uses eax, to save into global varibale n


							

						; get an integer from the user
 00000062			again::		
 00000062  23 C0					and		eax, eax
 00000064  BA 000000C1 R				mov		edx, OFFSET	userData1	; add 55 to skip ebp, eax, ebx, edx
 00000069  E8 00000000 E				call	WriteString			
 0000006E  E8 00000000 E				call	ReadInt
 00000073  A3 0000022B R				mov		n, eax
 00000078  E8 00000001					call	valid
 0000007D  C3						ret

 0000007E			getUserData ENDP

 0000007E			valid PROC
				; pre: this subprocedure to getUserData is used to check if the value in the register ebx,
				; fits within the range 1-400. if not, then this loops back to getUserData
				; used eax, ebx, ecx, 
				; post: if the data is not correct it show error, otherwide it returns to main with a valid input
 0000007E  23 C0						and		eax, eax
 00000080  A1 0000022B R					mov		eax, n
 00000085  83 F8 01						cmp		eax, min			; if n > 1 and n < 400 go to the main procedure to show composites, else go back to the getUserData procedure
 00000088  7F 05						JG		check2
 0000008A  E8 00000011						call	error
 0000008F				check2:		
 0000008F  A1 0000022B R					mov		eax, n
 00000094  3D 00000190						cmp		eax, max
 00000099  7C 16						JL		validInt
 0000009B  E8 00000000						call	error				; if the secoond check is not satisfied then start again


 000000A0  BA 000000F7 R		error:		mov		edx, OFFSET userData2
 000000A5  E8 00000000 E					call	WriteString
 000000AA  E8 00000000 E					call	crlf
 000000AF  EB B1						jmp		again

 000000B1				validInt:
 000000B1  C3							ret
 000000B2			valid ENDP

 000000B2			showComposite PROC
				; pre: this procedure takes some string variables, and the number of composite values that we want
				; this procedure shows the composites
				; I will do this using a long approach of checking if the numbers from 4 to n are divisible by 2+i
				; if they are then they are composite and get printed, if not then it increments to the next
				; until the end of the loop
				; used eax, ebx, ecx
				; Post: it gives out the number of composite values calculated using the isComposite sub-procedure
							
 000000B2  BA 00000099 R					mov		edx, OFFSET composites
 000000B7  E8 00000000 E					call	WriteString
 000000BC  E8 00000000 E					call	crlf

				; moves the 0 into the count
 000000C1  A1 00000233 R					mov		eax, count
 000000C6  B8 00000000						mov		eax, 0
 000000CB  A3 00000233 R					mov		count, eax 

				; moves the 4 into the currentComp to initialize the currentComp
 000000D0  A1 0000022F R					mov		eax, currentComp
 000000D5  B8 00000004						mov		eax, 4
 000000DA  A3 0000022F R					mov		currentComp, eax
 000000DF  A3 0000023B R					mov		nextComp, eax
 000000E4  E8 00000000 E					call	WriteDec
 000000E9  BA 000000AF R					mov		edx, OFFSET space
 000000EE  E8 00000000 E					call	WriteString
				; initialize the the currentDiv to 2
 000000F3  A1 00000237 R					mov		eax, currentDiv
 000000F8  B8 00000002						mov		eax, 2
 000000FD  A3 00000237 R					mov		currentDiv, eax
				; setting up how many times the loop should happen maximum (equal to n)
 00000102  A1 0000022B R					mov     eax, n
 00000107  8B C8						mov		ecx, eax
							
								
 00000109			loopcomposite:	
									
 00000109  E8 00000024						call	isComposite						; calls the isComposite procedure
 0000010E				print:

				; if the currentComp > n then stop the loop, jumps to return
				; otherwise it will continue to execute the loop
 0000010E  A1 0000022B R					mov		eax, n							; places the input value inside eax
																		; decremets count cause it started at 1, cause of the initial 4
 00000113  39 05 00000233 R					cmp		count, eax						; if the count is bigger than the eax, then we have gone too far
 00000119  74 16						je		return
 0000011B  A1 0000022F R					mov		eax, currentComp				; prints the composite value that was divisible by currentDiv
 00000120  E8 00000000 E					call	WriteDec 
 00000125  BA 000000AF R					mov		edx, OFFSET space				; gives it the three spaces
 0000012A  E8 00000000 E					call	WriteString
 0000012F  E2 D8						loop	loopcomposite					; starts loop again
 00000131				return:
 00000131  C3							ret

 00000132			showComposite ENDP

 00000132			isComposite PROC
				; pre: this proc gets called and gets the number of composite numbers the main function wants
				; variables used: currentComp = keeps track of what is the composite number that is going to be printed
				;				  count = how many composite numbers do we need to print
				;			      currentDiv = in what iteration of division we are ( 2,3,4,5,..., n - 1)
				;				  registers: eax, edx, ecx, 
				; post: returns the values that are composites by starting at 4, then summing by 1, until the number the user want of composite numbers
					
 00000132			iteration:
				; if nextComp <= n, then execute else return to the showComposite
							
 00000132				increase:
 00000132  A1 0000022F R					mov		eax, currentComp			; intitially its 4
 00000137  40							inc     eax							; increased eax + 1
 00000138  A3 0000022F R					mov		currentComp, eax			; saved that new value in the currentComp

				; I need to make sure that a new row gets created every 10 composite numbers
 0000013D  83 3D 00000233 R					cmp		count, rowLength			; if the count = rowLength (10), we go to the newRow
	   0A
 00000144  74 60						je		newRow
						
				; the division is done to see if the number is a composite of smaller integers
							
 00000146  99							cdq
 00000147  F7 35 00000237 R					div		currentDiv					; eax/currentDiv
 0000014D  83 FA 00						cmp		edx, 0						; if the remainder is 0 , then finish
 00000150  74 4D						je		endIteration				
 00000152  EB 00						jmp		increaseDiv					; increment currentDiv = currentDiv + 1 

				; checks to see if the currentComp could be divisible by currentDiv, if it is then it saves it and writes it down
 00000154				increaseDiv:					
 00000154  A1 0000022F R					mov		eax, currentComp			; the numbers that are not divisible by 2, get tested to see if divisible by 3
 00000159  83 F8 05						cmp		eax, 5						; had a bug that kept saying that 5 is a composite number, but it's not
 0000015C  74 D4						je		increase					; this is a small patch for now
 0000015E  A3 0000022F R					mov		currentComp, eax			; mov the number to this global variable
 00000163  FF 05 00000237 R					inc		currentDiv					; increment the divisor
 00000169  F7 35 00000237 R					div		currentDiv					; divide by the divisor and if there is not remainder then go to assignComp
 0000016F  83 FA 00						cmp		edx, 0
 00000172  74 1F						je		assignComp
 00000174  EB BC						jmp		increase


				; checks to see if the currentComp could be divisible by currentDiv, if it is then it saves it and writes it down
				; this is going to be an attempt at making a loop that generates the rest of the composite numbers
 00000176				increaseDiv5:

							
												
 00000176  A1 0000022F R					mov		eax, currentComp			; the numbers that are not divisible by 2, get tested to see if divisible by 3
																	; had a bug that kept saying that 5 is a composite number, but it's not
 0000017B  A3 0000022F R					mov		currentComp, eax			; mov the number to this global variable
 00000180  FF 05 00000237 R					inc		currentDiv					; increment the divisor
 00000186  F7 35 00000237 R					div		currentDiv					; divide by the divisor and if there is not remainder then go to assignComp
 0000018C  83 FA 00						cmp		edx, 0
 0000018F  74 02						je		assignComp
 00000191  EB 9F						jmp		increase


				; is used to assign a composite value that is divisible by 3
 00000193				assignComp:
 00000193  A1 0000022F R					mov		eax, currentComp			; if we find another composite number, we save it to currentComp and end isComposite procedure
 00000198  A3 0000022F R					mov		currentComp, eax
 0000019D  EB 00						jmp		endIteration

				; if there is a composite value found it goes here			
 0000019F			endIteration:	
 0000019F  FF 05 00000233 R					inc		count						; since there was a composite found we increase the count
 000001A5  C3							ret
 000001A6			newRow:			
 000001A6  E8 00000000 E					call	crlf
 000001AB  C7 05 00000233 R					mov		count, 0
	   00000000
 000001B5  E9 FFFFFF78						jmp    iteration

 000001BA			isComposite ENDP


 000001BA			farewell PROC
				; uses the gdbye, myName, and gdbye1 variables
				; to print out the farewell message
 000001BA  E8 00000000 E					call	crlf
 000001BF  BA 0000018B R					mov		edx, OFFSET gdbye
 000001C4  E8 00000000 E					call	WriteString
 000001C9  BA 00000000 R					mov		edx, OFFSET myName
 000001CE  E8 00000000 E					call	WriteString
 000001D3  BA 000000AF R					mov		edx, OFFSET space
 000001D8  E8 00000000 E					call	WriteString
 000001DD  E8 00000000 E					call	crlf
 000001E2  BA 000001C7 R					mov		edx, OFFSET gdbye0
 000001E7  E8 00000000 E					call	WriteString
 000001EC  BA 000001FF R					mov		edx, OFFSET Ultron
 000001F1  E8 00000000 E					call	WriteString
 000001F6  C3							ret
							
 000001F7			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.23.28106.4	    02/16/20 23:08:25
..\..\project_1\project_4.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000023F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001F7 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 000001BA _TEXT	Length= 0000003D Public STDCALL
getUserData  . . . . . . . . . .	P Near	 00000062 _TEXT	Length= 0000001C Public STDCALL
intro  . . . . . . . . . . . . .	P Near	 0000001B _TEXT	Length= 00000047 Public STDCALL
isComposite  . . . . . . . . . .	P Near	 00000132 _TEXT	Length= 00000088 Public STDCALL
  iteration  . . . . . . . . . .	L Near	 00000132 _TEXT	
  increase . . . . . . . . . . .	L Near	 00000132 _TEXT	
  increaseDiv  . . . . . . . . .	L Near	 00000154 _TEXT	
  increaseDiv5 . . . . . . . . .	L Near	 00000176 _TEXT	
  assignComp . . . . . . . . . .	L Near	 00000193 _TEXT	
  endIteration . . . . . . . . .	L Near	 0000019F _TEXT	
  newRow . . . . . . . . . . . .	L Near	 000001A6 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showComposite  . . . . . . . . .	P Near	 000000B2 _TEXT	Length= 00000080 Public STDCALL
  loopcomposite  . . . . . . . .	L Near	 00000109 _TEXT	
  print  . . . . . . . . . . . .	L Near	 0000010E _TEXT	
  return . . . . . . . . . . . .	L Near	 00000131 _TEXT	
valid  . . . . . . . . . . . . .	P Near	 0000007E _TEXT	Length= 00000034 Public STDCALL
  check2 . . . . . . . . . . . .	L Near	 0000008F _TEXT	
  error  . . . . . . . . . . . .	L Near	 000000A0 _TEXT	
  validInt . . . . . . . . . . .	L Near	 000000B1 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
Ultron . . . . . . . . . . . . .	Byte	 000001FF _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
again  . . . . . . . . . . . . .	L Near	 00000062 _TEXT	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
composites . . . . . . . . . . .	Byte	 00000099 _DATA	
count  . . . . . . . . . . . . .	DWord	 00000233 _DATA	
currentComp  . . . . . . . . . .	DWord	 0000022F _DATA	
currentDiv . . . . . . . . . . .	DWord	 00000237 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dos  . . . . . . . . . . . . . .	DWord	 00000227 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gdbye0 . . . . . . . . . . . . .	Byte	 000001C7 _DATA	
gdbye  . . . . . . . . . . . . .	Byte	 0000018B _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000019 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000002D _DATA	
intro3 . . . . . . . . . . . . .	Byte	 0000006B _DATA	
isIn . . . . . . . . . . . . . .	Byte	 000000B3 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
max  . . . . . . . . . . . . . .	Number	 00000190h   
min  . . . . . . . . . . . . . .	Number	 00000001h   
myName . . . . . . . . . . . . .	Byte	 00000000 _DATA	
nextComp . . . . . . . . . . . .	DWord	 0000023B _DATA	
n  . . . . . . . . . . . . . . .	DWord	 0000022B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rowLength  . . . . . . . . . . .	Number	 0000000Ah   
space  . . . . . . . . . . . . .	Byte	 000000AF _DATA	
userData1  . . . . . . . . . . .	Byte	 000000C1 _DATA	
userData2  . . . . . . . . . . .	Byte	 000000F7 _DATA	
userData3  . . . . . . . . . . .	Byte	 00000167 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
who  . . . . . . . . . . . . . .	Byte	 0000000F _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
