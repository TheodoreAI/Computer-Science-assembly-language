Microsoft (R) Macro Assembler Version 14.23.28106.4	    03/15/20 22:13:03
project_6.asm						     Page 1 - 1


				; Author: Mateo Estrada
				; Last Modified: 3/15/2020
				; OSU email address: estradma@oregonstate.edu
				; Course number/section: CS271/S400
				; Project Number: 6                 Due Date: 3/15/2020
				; Description: This program is designed to implement calling low-level I/O procedures, and implementing it 
				; using macros. The goal is to Get a user input, verify that the input is valid (signed integer) by converting it to an int, then converting it back to a string,
				; then displaying the result. To test this out, an array is used. 



				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; Macro for the intro and for the code input description
				Intromacro		MACRO		buffer
				; This macro is designed to display text and instructions. 
				; Idea taken from lecture slides.
				; Recieves: String
				; Returns: Text
				; Pre-conditions: Needs to get string into the buffer
				; post-condtions: Displays the text.
								push		edx
								mov			edx, offset buffer
								call		WriteString
								call		crlf
								pop			edx
				ENDM


				Intromacro1		MACRO		buffer
				; Same as above but for getting the inputs in ReadVal.
								push		edx
								mov			edx, offset buffer
								call		WriteString
								pop			edx
				ENDM

				; Macro for the getString
				; D: Asks the user to input a string and then uses the user's input to put it in a memory location.
				; Recieves: The Intromacro to display the message, getString buffer, length of the buffer
				; Returns: N/A
				; Preconditions: N/A
				; Registers changed: edx, ecx

				getString		MACRO		buffer, bufferLength
								push		ecx
								push		edx
								
								; asks the user
								Intromacro1	inst1
								call		WriteString
								mov			edx, buffer
								mov			ecx, bufferLength	
								call		ReadString
								pop			edx
								pop			ecx

				ENDM

				CallWriteString		MACRO	buffer
				; Calls WriteString to get the string input
				; Pre-condition: Passing the address of memory location of string.
				; Recieves: memory location address
				; Returns: Input string
				; Post-condtion: returns the string in edx register	
									mov			edx, buffer
									call		WriteString		
				ENDM



				; Displays string that has been stored in memory
				; Preconditions: Must have string stored, and pass it as offset
				; Recieves: string
				; Returns: Display for user
				; post: N/A
				; Registers: edx 

				displayString	MACRO		stringAddy
								push		edx,
								mov			edx, stringAddy
								call		WriteString
								call		crlf
								pop			edx
				ENDM

 00000000			.data
 00000000 20 4D 61 64 65	design			BYTE			" Made by: Mateo Estrada", 0
	   20 62 79 3A 20
	   4D 61 74 65 6F
	   20 45 73 74 72
	   61 64 61 00
 00000018 20 57 65 6C 63	portfolio		BYTE			" Welcome to Portfolio Project for CS271: low-level I/O proc",0
	   6F 6D 65 20 74
	   6F 20 50 6F 72
	   74 66 6F 6C 69
	   6F 20 50 72 6F
	   6A 65 63 74 20
	   66 6F 72 20 43
	   53 32 37 31 3A
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 00
							


 00000054 20 50 6C 65 61	intro1			BYTE			" Please provide 10 signed decimal integers.",0
	   73 65 20 70 72
	   6F 76 69 64 65
	   20 31 30 20 73
	   69 67 6E 65 64
	   20 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 2E 00
 00000080 20 45 61 63 68	intro2			BYTE			" Each number needs to be small enough to fit inside a 32 bit register. ",0
	   20 6E 75 6D 62
	   65 72 20 6E 65
	   65 64 73 20 74
	   6F 20 62 65 20
	   73 6D 61 6C 6C
	   20 65 6E 6F 75
	   67 68 20 74 6F
	   20 66 69 74 20
	   69 6E 73 69 64
	   65 20 61 20 33
	   32 20 62 69 74
	   20 72 65 67 69
	   73 74 65 72 2E
	   20 00
 000000C8 20 41 66 74 65	intro3			BYTE			" After you have finished inputting the numbers I will display a list ",0
	   72 20 79 6F 75
	   20 68 61 76 65
	   20 66 69 6E 69
	   73 68 65 64 20
	   69 6E 70 75 74
	   74 69 6E 67 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 20 49 20 77
	   69 6C 6C 20 64
	   69 73 70 6C 61
	   79 20 61 20 6C
	   69 73 74 20 00
 0000010E 20 6F 66 20 69	intro4			BYTE			" of integers, their sum, and their average value. ", 0
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 20
	   00

 00000141 20 50 6C 65 61	inst1			BYTE			" Please enter a signed number: ",0
	   73 65 20 65 6E
	   74 65 72 20 61
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 3A
	   20 00
 00000161 20 59 6F 75 20	inst2			BYTE			" You entered the following numbers: ",0
	   65 6E 74 65 72
	   65 64 20 74 68
	   65 20 66 6F 6C
	   6C 6F 77 69 6E
	   67 20 6E 75 6D
	   62 65 72 73 3A
	   20 00

 00000186 20 45 52 52 4F	error			BYTE			" ERROR: the values you entered were too big or not signed",0
	   52 3A 20 74 68
	   65 20 76 61 6C
	   75 65 73 20 79
	   6F 75 20 65 6E
	   74 65 72 65 64
	   20 77 65 72 65
	   20 74 6F 6F 20
	   62 69 67 20 6F
	   72 20 6E 6F 74
	   20 73 69 67 6E
	   65 64 00
 000001C0 20 50 6C 65 61	inst3			BYTE			" Please try again: ",0
	   73 65 20 74 72
	   79 20 61 67 61
	   69 6E 3A 20 00


 000001D4 20 54 68 65 20	sum				BYTE			" The sum of these numbers is: ",0
	   73 75 6D 20 6F
	   66 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   20 69 73 3A 20
	   00
 000001F3 20 54 68 65 20	average			BYTE			" The rounded average is: ",0
	   72 6F 75 6E 64
	   65 64 20 61 76
	   65 72 61 67 65
	   20 69 73 3A 20
	   00



 0000020D 20 54 68 61 6E	gdbye			BYTE			" Thank you for grading all the programs to the best of your ability, be safe out there! ",0
	   6B 20 79 6F 75
	   20 66 6F 72 20
	   67 72 61 64 69
	   6E 67 20 61 6C
	   6C 20 74 68 65
	   20 70 72 6F 67
	   72 61 6D 73 20
	   74 6F 20 74 68
	   65 20 62 65 73
	   74 20 6F 66 20
	   79 6F 75 72 20
	   61 62 69 6C 69
	   74 79 2C 20 62
	   65 20 73 61 66
	   65 20 6F 75 74
	   20 74 68 65 72
	   65 21 20 00



				; array used and it's length
 00000266  0000000A [		arrayN			DWORD		10		DUP(?)
	    00000000
	   ]
 0000028E  00000019 [		stringIn		BYTE		25		DUP(?)
	    00
	   ]
 000002A7 00000000		stringLength	DWORD		?				; helps to keep track of how many char's
				; constant definitions
 = 0000000A			MaxIn = 10

 00000000			.code

 00000000			main proc
								; the introduction using a  Macro
								Intromacro	design
 00000000  52		     1					push		edx
 00000001  BA 00000000 R     1					mov			edx, offset design
 00000006  E8 00000000 E     1					call		WriteString
 0000000B  E8 00000000 E     1					call		crlf
 00000010  5A		     1					pop			edx
								Intromacro	portfolio
 00000011  52		     1					push		edx
 00000012  BA 00000018 R     1					mov			edx, offset portfolio
 00000017  E8 00000000 E     1					call		WriteString
 0000001C  E8 00000000 E     1					call		crlf
 00000021  5A		     1					pop			edx

								Intromacro	intro1		
 00000022  52		     1					push		edx
 00000023  BA 00000054 R     1					mov			edx, offset intro1
 00000028  E8 00000000 E     1					call		WriteString
 0000002D  E8 00000000 E     1					call		crlf
 00000032  5A		     1					pop			edx
								Intromacro	intro2
 00000033  52		     1					push		edx
 00000034  BA 00000080 R     1					mov			edx, offset intro2
 00000039  E8 00000000 E     1					call		WriteString
 0000003E  E8 00000000 E     1					call		crlf
 00000043  5A		     1					pop			edx
								Intromacro	intro3
 00000044  52		     1					push		edx
 00000045  BA 000000C8 R     1					mov			edx, offset intro3
 0000004A  E8 00000000 E     1					call		WriteString
 0000004F  E8 00000000 E     1					call		crlf
 00000054  5A		     1					pop			edx
								Intromacro	intro4
 00000055  52		     1					push		edx
 00000056  BA 0000010E R     1					mov			edx, offset intro4
 0000005B  E8 00000000 E     1					call		WriteString
 00000060  E8 00000000 E     1					call		crlf
 00000065  5A		     1					pop			edx
								
							
								; is intended to begin the process of getting string input 
 00000066  6A 0A						push	offset	MaxIn 		; 36
 00000068  68 00000141 R					push	offset	inst1		; 32
 0000006D  68 00000186 R					push	offset	error		; 28
 00000072  68 000001C0 R					push	offset	inst3		; 24
 00000077  68 00000266 R					push	offset	arrayN		; 20
 0000007C  68 0000028E R					push	offset	stringIN	; 16
 00000081  6A 19						push	SIZEOF	stringIN	; 12	
 00000083  68 000002A7 R					push	offset	stringLength	; 8
 00000088  E8 0000002E						call	fillArray

								; is intended to display the contents of arrayN
 0000008D  6A 0A						push	offset	MaxIn		; 20
 0000008F  68 00000266 R					push	offset	arrayN		; 16
 00000094  68 0000028E R					push	offset	stringIn	; 12
 00000099  E8 000000CE						call	writeVal

								
								; farewell is implemented with the IntroMacro for displaying msgs
 0000009E  E8 00000000 E					call		crlf
								Intromacro	gdbye
 000000A3  52		     1					push		edx
 000000A4  BA 0000020D R     1					mov			edx, offset gdbye
 000000A9  E8 00000000 E     1					call		WriteString
 000000AE  E8 00000000 E     1					call		crlf
 000000B3  5A		     1					pop			edx
								exit
 000000B4  6A 00	   *	    push   +000000000h
 000000B6  E8 00000000 E   *	    call   ExitProcess


 000000BB			main endp


 000000BB			fillArray		proc

				; Gets user input to fill arrayN. Calls on ReadVal to
				; read input, ReadVal calls Valid to make sure the input is
				; digits, then Valid calls convertStr to convert the  string into a number.
				; Preconditions: arrayN, inst1, error, and are passed as offset
				; and LENGTHOF arrayN is passed as value by pushing them to the stack.
				; Receives: arrayN, error, inst1, etc by reference.
				; Returns: n/a
				; Registers used: eax, ecx, ebp, esi, ebx
								
								; begin the usual stack process
							

 000000BB  55							push	ebp
 000000BC  8B EC						mov		ebp, esp
								
 000000BE  8B 45 20						mov		eax, [ebp + 32]		; save the msg for later use
 000000C1  50							push	eax
 000000C2  8B 5D 1C						mov		ebx, [ebp + 28]     ; error msg
 000000C5  53							push	ebx
 000000C6  8B 4D 24						mov		ecx, [ebp + 36]		; the length of array to loop
 000000C9  8B 7D 14						mov		edi, [ebp + 20]		; arrayN address
 000000CC							fill:
									
 000000CC  FF 75 20							push	[ebp + 32]		; pushing the msg to ask
 000000CF  FF 75 1C							push	[ebp + 28]		; push the error msg
 000000D2  FF 75 18							push	[ebp + 24]		; push the try again msg
 000000D5  E8 0000000D							call	ReadVal

 000000DA  8F 07							pop		[edi]
 000000DC  83 C7 04							add		edi, 4
 000000DF  E2 EB							loop	fill 

 000000E1  5D							pop	ebp
 000000E2  58							pop eax
 000000E3  5B							pop ebx
 000000E4  C2 0018						ret	24

 000000E7			fillArray		endp


 000000E7			ReadVal			proc

				; Reads user input, calls Valid to make sure the input is made of numbers. 
				; Recieves: Error, inst1, inst3 by reference by pushing on stack.
				; Pre-conditions: All parameters are passed by reference by pusing on stack using offset.
				; Returns: Valid inputs of signed integers 
				; post-conditions: returns a valid signed integer on the top of the stack to be referenced by value.
				; Registers used: eax, ebp, ebx, esi, ecx
								LOCAL		state: WORD, inNum[16]:DWORD
 000000E7  55		   *	    push   ebp
 000000E8  8B EC	   *	    mov    ebp, esp
 000000EA  83 C4 BC	   *	    add    esp, 0FFFFFFBCh
 000000ED  57							push		edi
 000000EE  51							push		ecx
 000000EF  8D 45 BC						lea			eax, inNum

 000000F2							InNumLoop:
											getString	eax, LENGTHOF inNum		; use the getString macro to input the integers
 000000F2  51		     1					push		ecx
 000000F3  52		     1					push		edx
 000000F4  52		     2					push		edx
 000000F5  BA 00000141 R     2					mov			edx, offset inst1
 000000FA  E8 00000000 E     2					call		WriteString
 000000FF  5A		     2					pop			edx
 00000100  E8 00000000 E     1					call		WriteString
 00000105  8B D0	     1					mov			edx, eax
 00000107  B9 00000010	     1					mov			ecx, LENGTHOF inNum	
 0000010C  E8 00000000 E     1					call		ReadString
 00000111  5A		     1					pop			edx
 00000112  59		     1					pop			ecx
 00000113  FF 75 1C									push		[ebp + 28]				; loading the error messages
 00000116  8D 5D FE									lea			ebx, state
 00000119  53										push		ebx						; pusing it to stack so Valid gets it
 0000011A  8B 45 BC									mov			eax, inNum
 0000011D  50										push		eax					    ; pushin inNum
 0000011E  6A 10									push		LENGTHOF inNum
 00000120  E8 00000005									call		Valid

 00000125  5D							pop		ebp
 00000126  C9		   *	    leave  
 00000127  C2 001C						ret		28
 0000012A			ReadVal			endp


 0000012A			Valid			proc
				; Makes sure the user input string is a signed integer.
				; Pre-conditions: Push on stack by offset the following: error, inst1, inst3, and the LENGTHOF inStrNum
				; Recieves: Error, inst1, inst3, by reference and LENGTHOF inStrNum by value.
				; Returns: A valid value, while changing the state of Valid to 0 if invalid. 
				; post-conditions: int is valid, valid state is changed to 0 if invalid number was inputter.
				; Registers used: eax, edx, ecx, esi, ebp
 0000012A  55							push	ebp
 0000012B  8B E5						mov		esp, ebp			; 
								
								; loading the string
 0000012D  8B 75 0C						mov		esi, [ebp + 12]		; ESI pointing to the source 
 00000130  8B 4D 08						mov		ecx, [ebp + 8]		; setting the rep counter
								
								; from the book/lecture slides on checking to see if strings 
								; are digits and signed
 00000133							strCheck:
									
 00000133  AC									lodsb
 00000134  3C 00								cmp		al, 0
 00000136  74 0C								JE		NotString
 00000138  3C 30								cmp		al, 48
 0000013A  7C 0A								JL		ChngState
 0000013C  3C 39								cmp		al, 57
 0000013E  7F 06								JG		ChngState
 00000140  E2 F1								loop	strCheck
 00000142  EB 24								JMP		ending
 00000144							NotString:
 00000144  EB 22								jmp		ending

 00000146							chngState:
									
										Intromacro	error		; load the error message
 00000146  52		     1					push		edx
 00000147  BA 00000186 R     1					mov			edx, offset error
 0000014C  E8 00000000 E     1					call		WriteString
 00000151  E8 00000000 E     1					call		crlf
 00000156  5A		     1					pop			edx
 00000157  E8 00000000 E							call		crlf
 0000015C  8B 55 10								mov			edx, [ebp + 16]
 0000015F  B8 00000000								mov			eax, 0
 00000164  89 02								mov			[edx], eax
 00000166  EB 00								jmp			ending
 00000168							ending:

 00000168  5A									pop			edx
 00000169  C2 0010								ret			16

 0000016C			Valid			endp


 0000016C			writeVal		proc
				; Is supposed to write an integer to the console as a string using the convertChar MACRO to do so.
				; Recieves: int by value
				; Pre-conditions: int is passed onto the stack by offset
				; returns: nothing
				; post-conditions: integer is printed as a str to the display
				; Registers used: ebp, eax
 0000016C  55									push		ebp
 0000016D  8B EC								mov			ebp, esp

 0000016F  5D									pop			ebp
 00000170  C3									ret			

 00000171			writeVal		endp

				END main
Microsoft (R) Macro Assembler Version 14.23.28106.4	    03/15/20 22:13:03
project_6.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

CallWriteString  . . . . . . . .	Proc
Intromacro1  . . . . . . . . . .	Proc
Intromacro . . . . . . . . . . .	Proc
displayString  . . . . . . . . .	Proc
getString  . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002AB Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000171 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000E7 _TEXT	Length= 00000043 Public STDCALL
  state  . . . . . . . . . . . .	Word	 bp - 00000002
  inNum  . . . . . . . . . . . .	DWord	 bp - 00000044
  InNumLoop  . . . . . . . . . .	L Near	 000000F2 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Valid  . . . . . . . . . . . . .	P Near	 0000012A _TEXT	Length= 00000042 Public STDCALL
  strCheck . . . . . . . . . . .	L Near	 00000133 _TEXT	
  NotString  . . . . . . . . . .	L Near	 00000144 _TEXT	
  chngState  . . . . . . . . . .	L Near	 00000146 _TEXT	
  ending . . . . . . . . . . . .	L Near	 00000168 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000BB _TEXT	Length= 0000002C Public STDCALL
  fill . . . . . . . . . . . . .	L Near	 000000CC _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000BB Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 0000016C _TEXT	Length= 00000005 Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MaxIn  . . . . . . . . . . . . .	Number	 0000000Ah   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayN . . . . . . . . . . . . .	DWord	 00000266 _DATA	
average  . . . . . . . . . . . .	Byte	 000001F3 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
design . . . . . . . . . . . . .	Byte	 00000000 _DATA	
error  . . . . . . . . . . . . .	Byte	 00000186 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gdbye  . . . . . . . . . . . . .	Byte	 0000020D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inst1  . . . . . . . . . . . . .	Byte	 00000141 _DATA	
inst2  . . . . . . . . . . . . .	Byte	 00000161 _DATA	
inst3  . . . . . . . . . . . . .	Byte	 000001C0 _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000054 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000080 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 000000C8 _DATA	
intro4 . . . . . . . . . . . . .	Byte	 0000010E _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
portfolio  . . . . . . . . . . .	Byte	 00000018 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stringIn . . . . . . . . . . . .	Byte	 0000028E _DATA	
stringLength . . . . . . . . . .	DWord	 000002A7 _DATA	
sum  . . . . . . . . . . . . . .	Byte	 000001D4 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
